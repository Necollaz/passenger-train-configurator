internal class Program
{
    private static void Main(string[] args)
    {
        TrainScheduler office = new TrainScheduler();
        office.Menu();
    }
}

public class Direction
{
    public Direction(string nameStartPoint, string nameEndPoint)
    {
        NameStartPoint = nameStartPoint;
        NameEndPoint = nameEndPoint;
    }

    public string NameStartPoint { get; private set; }
    public string NameEndPoint { get; private set; }

    public void ShowInfo()
    {
        Console.WriteLine($"Поезд следует из {NameStartPoint} до {NameEndPoint}.");
    }

}

public class RailwayCarriage
{
    public RailwayCarriage (string name, int capacity)
    {
        Name = name;
        Capacity = capacity;
    }

    public string Name { get; private set; }
    public int Capacity { get; private set; }

    public void ShowInfo()
    {
        Console.WriteLine($"Вагон: {Name}, имеет вместительность - {Capacity} человек.");
    }
}

public class Train
{
    private List<RailwayCarriage> _railwayCarriages = new List<RailwayCarriage>();
    private List<RailwayCarriage> _railwayCarriagesDepo = new List<RailwayCarriage>();
    private int _maxQuantitySeats = 0;

    public Train ()
    {
        _railwayCarriagesDepo.Add(new RailwayCarriage("Эконом", 40));
        _railwayCarriagesDepo.Add(new RailwayCarriage("Бизнес", 25));
        _railwayCarriagesDepo.Add(new RailwayCarriage("Премиум", 10));
    }

    public void AddWagons(int passengersCount)
    {
        if (passengersCount <= 0)
        {
            Console.WriteLine("Количество пассажиров должно быть больше нуля.");
            return;
        }

        int currentCapacity = 0;

        foreach (var wagonType in _railwayCarriagesDepo)
        {
            while (currentCapacity < passengersCount)
            {
                _railwayCarriages.Add(new RailwayCarriage(wagonType.Name, wagonType.Capacity));
                currentCapacity += wagonType.Capacity;

                if(currentCapacity >= passengersCount)
                {
                    break;
                }
            }

            if (currentCapacity >= passengersCount)
            {
                break;
            }
        }

        _maxQuantitySeats = currentCapacity;
    }

    public void ShowInfo(int numberPassengers)
    {
        if(_railwayCarriages.Count != 0)
        {
            for (int i = 0; i < _railwayCarriages.Count; i++)
            {
                _railwayCarriages[i].ShowInfo();
            }

            Console.WriteLine($"\nКоличество мест в вагоне: {_maxQuantitySeats}. " +
                              $"\nСвободные места: {GiveNumberAvailableSeats(numberPassengers)}, " +
                              $"количество занятых мест: {GiveNumberOccupiedPlaces(numberPassengers)}.");

        }
        else
        {
            Console.WriteLine("Информация о поезде нет.");
        }
    }

    private int GiveNumberOccupiedPlaces(int numberPassengers)
    {
        return numberPassengers;
    }

    private int GiveNumberAvailableSeats(int numberPassengers)
    {
        return _maxQuantitySeats - numberPassengers;
    }
}

public class TicketOffice
{
    private int _price;
    private int _profit;
    private Random _random = new Random();

    public int QuantityPassengers { get; private set; }

    public void Sell()
    {
        CreatePassengers();
        CreatePrice();
        SumProfit();
    }

    public void ShowProfit()
    {
        Console.WriteLine($"Доход составил: {_profit}. Стоимость одного билета: {_price}.");
    }

    private void CreatePassengers()
    {
        int minPassengersCount = 20;
        int maxPassengersCount = 70;

        QuantityPassengers = _random.Next(minPassengersCount, maxPassengersCount);
    }

    private void CreatePrice()
    {
        int minPrice = 500;
        int maxPrice = 1000;

        _price = _random.Next(minPrice, maxPrice + 1);
    }

    private void SumProfit()
    {
        _profit = QuantityPassengers * _price ;
    }

}

public class TrainScheduler 
{
    private bool _isCreateDirection = false;
    private bool _isSellTicket = false;
    private bool _isCreateRailwayCarriages = false;

    private Train _train = new Train();
    private TicketOffice _office = new TicketOffice();
    private List<Direction> _directions = new List<Direction>();
    private List<Direction> _departedDirections = new List<Direction>();

    public void Menu()
    {
        const string CommandCreateDirection = "1";
        const string CommandSellTickets = "2";
        const string CommandCreateTrain = "3";
        const string CommandDepartureTrain = "4";
        const string CommandExit = "5";

        bool isProgramWork = true;

        while (isProgramWork)
        {
            Console.WriteLine("Добро пожаловать в меню!");

            ShowProfit();
            ShowDirections();
            ShowRailwayCarriages();
            ShowNumbersPassengers();
            ShowDepartureTrains();

            Console.WriteLine("Выбери один из пунктов меню: ");
            Console.WriteLine($"{CommandCreateDirection} - Создать направления для поездов.");
            Console.WriteLine($"{CommandSellTickets} - Продать билеты на поезд.");
            Console.WriteLine($"{CommandCreateTrain} - Сформировать поезд.");
            Console.WriteLine($"{CommandDepartureTrain} - Отправить поезд.");
            Console.WriteLine($"{CommandExit} - Выйти из программы.");
            string userInput = Console.ReadLine();

            switch (userInput)
            {
                case CommandCreateDirection:
                    CreateDirections();
                    break;

                case CommandSellTickets:
                    SellTicket();
                    break;

                case CommandCreateTrain:
                    CreateRailwayCarriages();
                    break;

                case CommandDepartureTrain:
                    DepartureTrain();
                    break;

                case CommandExit:
                    Console.WriteLine("Вы вышли из программы.");
                    isProgramWork = false;
                    break;

                default:
                    Console.WriteLine("Такого пункта в меню нет.");
                    break;
            }

            Console.WriteLine("Нажмите любую клавишу чтобы продолжить.");
            Console.ReadKey();
            Console.Clear();
        }
    }

    private void CreateDirections()
    {
        if (_isCreateDirection)
        {
            Console.WriteLine("Направление уже создано.");
        }
        else
        {
            Console.Write("Введите город из которого должен отправиться поезд: ");
            string userInputStartPoint = Console.ReadLine();

            Console.Write("Введите город в который должен прибыть поезд: ");
            string userInputEndPoint = Console.ReadLine();

            if(userInputEndPoint == userInputStartPoint)
            {
                Console.WriteLine("Город отправления не может совпадать с городом прибытия.");
            }
            else
            {
                _directions.Add(new Direction(userInputStartPoint, userInputEndPoint));
                _isCreateDirection = true;
                Console.WriteLine("Направление создано.");
            }
        }
    }

    private void SellTicket()
    {
        if (_isSellTicket || _isCreateDirection == false)
        {
            Console.WriteLine("Вы еще не создали направление, билетов нет.");
        }
        else
        {
            _isSellTicket = true;
            _office.Sell();
            Console.WriteLine("Билеты проданы.");
        }
    }

    private void CreateRailwayCarriages()
    {
        if(_isCreateRailwayCarriages || _isSellTicket == false)
        {
            Console.WriteLine("Вы еще не продали билеты.");
        }
        else
        {
            _isCreateRailwayCarriages = true;
            _train.AddWagons(_office.QuantityPassengers);
            Console.WriteLine("Поезд сформирован.");
        }
    }

    private void DepartureTrain()
    {
        if(!_isCreateRailwayCarriages || _isCreateDirection == false)
        {
            Console.WriteLine("Невозможно отправить поезд. Проверьте, есть ли направление и вагоны.");
        }
        else
        {
            if(_directions.Count > 0)
            {
                Direction direction = _directions[0];
                _departedDirections.Add(direction);
                _directions.RemoveAt(0);
                _isCreateDirection = false;
                _train.ShowInfo(_office.QuantityPassengers);
                Console.WriteLine("Поезд отправлен!");

            }
        }
    }

    private void ShowDirections()
    {
        if (_isCreateDirection)
        {
            _directions[_directions.Count - 1].ShowInfo();
        }
    }

    private void ShowRailwayCarriages()
    {
        if (_isCreateRailwayCarriages)
        {
            _train.ShowInfo(_office.QuantityPassengers);
        }
    }

    private void ShowNumbersPassengers()
    {
        if (_isSellTicket)
        {
            Console.WriteLine($"Количество пассажиров: {_office.QuantityPassengers} человек.");
        }
    }

    private void ShowProfit()
    {
        if (_isCreateRailwayCarriages)
        {
            _office.ShowProfit();
        }
    }

    private void ShowDepartureTrains()
    {
        if (_departedDirections.Count > 0)
        {
            Console.WriteLine("\nСписок отправленных поездов: ");

            foreach (Direction direction in _departedDirections)
            {
                direction.ShowInfo();
            }
        }
        else
        {
            Console.WriteLine("На данный момент нет отправленных поездов.");
        }
    }
}
